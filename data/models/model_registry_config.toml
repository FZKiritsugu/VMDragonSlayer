# VMDragonSlayer Model Registry Configuration
# Comprehensive model management system with versioning and lineage tracking

[database]
type = "sqlite"
path = "data/models/model_registry.db"
backup_enabled = true
backup_interval = "daily"
max_backups = 7

[version_control_system]
enabled = true
git_backend = true
git_repository = "models/.git"
auto_commit = true
commit_message_template = "Update model {model_name} v{version} - accuracy: {accuracy:.4f}"
branch_strategy = "feature_branch"  # "main_branch", "feature_branch", "tag_based"
tag_format = "v{version}"

[model_lineage_tracking]
enabled = true
track_parent_models = true
track_training_data = true
track_feature_engineering = true
dependency_graph = true
provenance_logging = true

[performance_metrics_history]
enabled = true
retention_days = 365
metrics_to_track = [
    "accuracy", "precision", "recall", "f1_score",
    "inference_time", "memory_usage", "model_size",
    "training_time", "convergence_epochs"
]
benchmark_datasets = [
    "validation_set", "test_set", "cross_validation"
]
performance_thresholds = {
    accuracy = 0.85,
    precision = 0.80,
    recall = 0.80,
    f1_score = 0.80,
    inference_time_ms = 1000,
    memory_usage_mb = 512
}

[models]
# Model metadata table
table_name = "model_registry"
schema = """
CREATE TABLE IF NOT EXISTS model_registry (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    model_id TEXT UNIQUE NOT NULL,
    model_name TEXT NOT NULL,
    model_type TEXT NOT NULL,  -- 'classifier', 'detector', 'ensemble'
    version TEXT NOT NULL,
    parent_model_id TEXT,      -- For model lineage
    file_path TEXT NOT NULL,
    file_size INTEGER,
    created_date TEXT NOT NULL,
    last_updated TEXT NOT NULL,
    accuracy REAL,
    precision_score REAL,
    recall REAL,
    f1_score REAL,
    training_samples INTEGER,
    validation_samples INTEGER,
    feature_count INTEGER,
    model_parameters TEXT,     -- JSON string
    training_config TEXT,      -- JSON string
    feature_config TEXT,       -- JSON string  
    metadata TEXT,             -- JSON string
    status TEXT DEFAULT 'active',  -- 'active', 'deprecated', 'testing', 'archived'
    checksum TEXT,
    git_commit_hash TEXT,      -- Git commit for version tracking
    created_by TEXT DEFAULT 'system',
    tags TEXT,                 -- JSON array of tags
    deployment_ready BOOLEAN DEFAULT FALSE,
    benchmark_score REAL,
    model_complexity TEXT,     -- 'simple', 'medium', 'complex'
    FOREIGN KEY (parent_model_id) REFERENCES model_registry(model_id)
);
"""

[model_versions]
# Model version history table
table_name = "model_versions"
schema = """
CREATE TABLE IF NOT EXISTS model_versions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    model_id TEXT NOT NULL,
    version TEXT NOT NULL,
    version_type TEXT NOT NULL, -- 'major', 'minor', 'patch'
    changelog TEXT,
    created_date TEXT NOT NULL,
    file_path TEXT NOT NULL,
    file_size INTEGER,
    checksum TEXT,
    git_commit_hash TEXT,
    performance_delta TEXT,     -- JSON with performance comparison
    backward_compatible BOOLEAN DEFAULT TRUE,
    deprecated BOOLEAN DEFAULT FALSE,
    deprecation_date TEXT,
    replacement_version TEXT,
    FOREIGN KEY (model_id) REFERENCES model_registry(model_id)
);
"""

[model_lineage]
# Model lineage and dependency tracking
table_name = "model_lineage"
schema = """
CREATE TABLE IF NOT EXISTS model_lineage (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    child_model_id TEXT NOT NULL,
    parent_model_id TEXT NOT NULL,
    relationship_type TEXT NOT NULL, -- 'derived_from', 'ensemble_component', 'transfer_learning'
    influence_weight REAL DEFAULT 1.0,
    created_date TEXT NOT NULL,
    metadata TEXT,              -- JSON string
    FOREIGN KEY (child_model_id) REFERENCES model_registry(model_id),
    FOREIGN KEY (parent_model_id) REFERENCES model_registry(model_id),
    UNIQUE(child_model_id, parent_model_id, relationship_type)
);
"""

[training_data_tracking]
# Training data lineage and versioning
table_name = "training_data_versions"
schema = """
CREATE TABLE IF NOT EXISTS training_data_versions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    data_version_id TEXT UNIQUE NOT NULL,
    dataset_name TEXT NOT NULL,
    version TEXT NOT NULL,
    file_path TEXT NOT NULL,
    sample_count INTEGER,
    feature_count INTEGER,
    label_distribution TEXT,   -- JSON string
    data_hash TEXT NOT NULL,
    created_date TEXT NOT NULL,
    preprocessing_steps TEXT,   -- JSON string
    quality_metrics TEXT,       -- JSON string
    source_info TEXT           -- JSON string
);
"""

[model_data_mapping]
# Mapping between models and training data versions
table_name = "model_data_mapping"
schema = """
CREATE TABLE IF NOT EXISTS model_data_mapping (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    model_id TEXT NOT NULL,
    data_version_id TEXT NOT NULL,
    usage_type TEXT NOT NULL,  -- 'training', 'validation', 'testing'
    created_date TEXT NOT NULL,
    FOREIGN KEY (model_id) REFERENCES model_registry(model_id),
    FOREIGN KEY (data_version_id) REFERENCES training_data_versions(data_version_id)
);
"""

[performance_metrics]
# Performance tracking table
table_name = model_performance
schema = """
CREATE TABLE IF NOT EXISTS model_performance (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    model_id TEXT NOT NULL,
    test_date TEXT NOT NULL,
    test_dataset_size INTEGER,
    accuracy REAL,
    precision_score REAL,
    recall REAL,
    f1_score REAL,
    inference_time_ms REAL,
    memory_usage_mb REAL,
    test_config TEXT,  -- JSON string
    notes TEXT,
    FOREIGN KEY (model_id) REFERENCES model_registry (model_id)
);
"""

[training_history]
# Training history table  
table_name = training_history
schema = """
CREATE TABLE IF NOT EXISTS training_history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    model_id TEXT NOT NULL,
    training_start TEXT NOT NULL,
    training_end TEXT,
    training_duration_seconds INTEGER,
    epochs_completed INTEGER,
    final_loss REAL,
    final_accuracy REAL,
    best_epoch INTEGER,
    early_stopping BOOLEAN DEFAULT 0,
    training_config TEXT,  -- JSON string
    training_log_path TEXT,
    status TEXT DEFAULT 'completed',  -- 'running', 'completed', 'failed', 'cancelled'
    error_message TEXT,
    FOREIGN KEY (model_id) REFERENCES model_registry (model_id)
);
"""

[model_versions]
# Model version tracking
table_name = model_versions
schema = """
CREATE TABLE IF NOT EXISTS model_versions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    model_name TEXT NOT NULL,
    version TEXT NOT NULL,
    model_id TEXT NOT NULL,
    parent_version TEXT,
    is_current BOOLEAN DEFAULT 0,
    change_description TEXT,
    created_date TEXT NOT NULL,
    FOREIGN KEY (model_id) REFERENCES model_registry (model_id),
    UNIQUE(model_name, version)
);
"""

[initialization]
# Default models to register
default_models = [
    {
        model_id = "bytecode_classifier_v1"
        model_name = "Bytecode Pattern Classifier"
        model_type = "classifier"
        version = "1.0.0"
        file_path = "data/models/pretrained/bytecode_classifier_v1.pkl"
        description = "Pre-trained classifier for VM bytecode patterns"
        status = "active"
    },
    {
        model_id = "vm_detector_v1"
        model_name = "VM Detection Model"
        model_type = "detector"
        version = "1.0.0"
        file_path = "data/models/pretrained/vm_detector_v1.pkl"
        description = "Binary classifier for VM presence detection"
        status = "active"
    },
    {
        model_id = "handler_classifier_v1"
        model_name = "Handler Classification Model"
        model_type = "classifier"
        version = "1.0.0"
        file_path = "data/models/pretrained/handler_classifier_v1.pkl"
        description = "Multi-class classifier for VM handler types"
        status = "active"
    }
]

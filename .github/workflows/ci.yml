name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Code quality checks
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run ruff linting
      run: ruff check dragonslayer/
    
    - name: Check code formatting with black
      run: black --check dragonslayer/
    
    - name: Check import sorting with isort
      run: isort --check-only dragonslayer/
    
    - name: Run type checking with mypy
      run: mypy dragonslayer/
      continue-on-error: true  # Allow mypy failures initially

  # Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run bandit security scan
      run: bandit -r dragonslayer/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json
    
    - name: Run pip-audit for dependency vulnerabilities
      run: pip-audit --format=json --output=pip-audit-report.json
      continue-on-error: true
    
    - name: Upload pip-audit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pip-audit-report
        path: pip-audit-report.json

  # Unit tests
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix for faster builds
          - os: macos-latest
            python-version: "3.8"
          - os: macos-latest 
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.8"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,ml]"
    
    - name: Run tests with pytest
      run: |
        pytest tests/ --cov=dragonslayer --cov-report=xml --cov-report=term-missing
      env:
        COVERAGE_FILE: .coverage.${{ matrix.os }}.${{ matrix.python-version }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_VERSION
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Build package
  build:
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-packages
        path: dist/

  # Plugin builds
  build-plugins:
    runs-on: ubuntu-latest
    needs: [lint]
    strategy:
      matrix:
        plugin: [ghidra]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK for Ghidra
      if: matrix.plugin == 'ghidra'
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle for Ghidra
      if: matrix.plugin == 'ghidra'
      uses: gradle/gradle-build-action@v2
    
    - name: Build Ghidra Plugin
      if: matrix.plugin == 'ghidra'
      run: |
        cd plugins/ghidra
        # Mock Ghidra installation for build test
        mkdir -p /tmp/ghidra/support
        echo "apply plugin: 'java'" > /tmp/ghidra/support/buildExtension.gradle
        # Build with mock environment
        GHIDRA_INSTALL_DIR=/tmp/ghidra gradle build
      continue-on-error: true  # Allow plugin build failures initially
    
    - name: Upload plugin artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ${{ matrix.plugin }}-plugin
        path: plugins/${{ matrix.plugin }}/dist/

  # Documentation
  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install mkdocs mkdocs-material mkdocstrings[python]
    
    - name: Build documentation
      run: |
        # Create basic mkdocs.yml if it doesn't exist
        if [ ! -f mkdocs.yml ]; then
          cat > mkdocs.yml << EOF
        site_name: VMDragonSlayer Documentation
        site_description: Advanced VM detection and analysis library
        site_url: https://vmdragonslayer.dev
        
        theme:
          name: material
          palette:
            - scheme: default
              primary: deep purple
              accent: purple
        
        nav:
          - Home: index.md
          - Security: SECURITY.md
          - Contributing: CONTRIBUTING.md
          - Code of Conduct: CODE_OF_CONDUCT.md
        
        plugins:
          - search
          - mkdocstrings:
              handlers:
                python:
                  paths: [dragonslayer]
        EOF
        fi
        
        # Create docs directory and basic index
        mkdir -p docs
        if [ ! -f docs/index.md ]; then
          cp README.md docs/index.md
        fi
        
        # Copy policy files
        cp SECURITY.md docs/ 2>/dev/null || true
        cp CONTRIBUTING.md docs/ 2>/dev/null || true
        cp CODE_OF_CONDUCT.md docs/ 2>/dev/null || true
        
        # Build docs
        mkdocs build
      continue-on-error: true
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: documentation
        path: site/

  # Release workflow
  release:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [build, build-plugins]
    permissions:
      contents: write
      id-token: write  # For trusted publishing
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-packages
        path: dist/
    
    - name: Download plugin artifacts
      uses: actions/download-artifact@v3
      with:
        name: ghidra-plugin
        path: plugins-dist/
      continue-on-error: true
    
    - name: Generate checksums
      run: |
        cd dist/
        sha256sum * > SHA256SUMS
        cd ../plugins-dist/
        sha256sum * > SHA256SUMS 2>/dev/null || true
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
          plugins-dist/*
        generate_release_notes: true
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      continue-on-error: true  # Don't fail if PyPI upload fails

  # Dependency updates
  dependency-review:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate

# Security policy enforcement
  security-policy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for SECURITY.md
      run: |
        if [ ! -f SECURITY.md ]; then
          echo "::error::SECURITY.md is required"
          exit 1
        fi
    
    - name: Check for CODE_OF_CONDUCT.md  
      run: |
        if [ ! -f CODE_OF_CONDUCT.md ]; then
          echo "::error::CODE_OF_CONDUCT.md is required"
          exit 1
        fi
    
    - name: Verify license consistency
      run: |
        # Check that LICENSE and pyproject.toml license match
        if grep -q "GPL-3.0" pyproject.toml && grep -q "GNU GENERAL PUBLIC LICENSE" LICENSE; then
          echo "License consistency check passed"
        else
          echo "::error::License mismatch between LICENSE and pyproject.toml"
          exit 1
        fi
